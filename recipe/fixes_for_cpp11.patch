# HG changeset patch
# User tmodes
# Date 1699691183 -3600
#      Sat Nov 11 09:26:23 2023 +0100
# Node ID f553eed50964e4ae5a9bef357348ad0accdcb87b
# Parent  109a3e0c5019dc6cc341d4222c0a919339975afe
Fixes deprecated std::binary_function in C++11

diff -r 109a3e0c5019 -r f553eed50964 src/hugin1/base_wx/wxPanoCommand.h
--- a/src/hugin1/base_wx/wxPanoCommand.h	Sat Nov 11 09:25:58 2023 +0100
+++ b/src/hugin1/base_wx/wxPanoCommand.h	Sat Nov 11 09:26:23 2023 +0100
@@ -35,7 +35,7 @@
 namespace PanoCommand
 {
 
-    struct FileIsNewer : public std::binary_function<const std::string &, const std::string &, bool>
+    struct FileIsNewer
     {
 
         bool operator()(const std::string & file1, const std::string & file2)
diff -r 109a3e0c5019 -r f553eed50964 src/hugin_base/hugin_utils/alphanum.h
--- a/src/hugin_base/hugin_utils/alphanum.h	Sat Nov 11 09:25:58 2023 +0100
+++ b/src/hugin_base/hugin_utils/alphanum.h	Sat Nov 11 09:26:23 2023 +0100
@@ -39,7 +39,6 @@
 #define ALPHANUM__HPP
 
 #include <hugin_shared.h>
-#include <functional>
 #include <string>
 
 // TODO: make comparison with hexadecimal numbers. Extend the alphanum_comp() function by traits to choose between decimal and hexadecimal.
@@ -63,7 +62,7 @@
    Algorithm". If the objects are no std::string, they must
    implement "std::ostream operator<< (std::ostream&, const Ty&)".
 */
-struct IMPEX alphanum_less : public std::binary_function<const std::string&, const std::string&, bool>
+struct IMPEX alphanum_less
 {
     bool operator()(const std::string& left, const std::string& right) const;
 };
diff -r 109a3e0c5019 -r f553eed50964 src/hugin_base/vigra_ext/pyramid2.h
--- a/src/hugin_base/vigra_ext/pyramid2.h	Sat Nov 11 09:25:58 2023 +0100
+++ b/src/hugin_base/vigra_ext/pyramid2.h	Sat Nov 11 09:26:23 2023 +0100
@@ -1355,7 +1355,7 @@
 // Used when collapsing a laplacian pyramid.
 // Explict fromPromote necessary to avoid overflow/underflow problems.
 template<typename T1, typename T2, typename T3>
-struct FromPromotePlusFunctorWrapper : public std::binary_function<T1, T2, T3> {
+struct FromPromotePlusFunctorWrapper {
     inline T3 operator()(const T1 &a, const T2 &b) const {
         return NumericTraits<T3>::fromPromote(a + b);
     }
