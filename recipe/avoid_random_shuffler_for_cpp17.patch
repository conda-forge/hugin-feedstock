diff -r 7b28c3f883f9 src/foreign/flann/algorithms/kdtree_index.h
--- a/src/foreign/flann/algorithms/kdtree_index.h	Fri Oct 11 08:42:26 2024 +0200
+++ b/src/foreign/flann/algorithms/kdtree_index.h	Thu Oct 17 16:55:53 2024 -0400
@@ -35,6 +35,7 @@
 #include <map>
 #include <cassert>
 #include <cstring>
+#include <random>
 
 #include "flann/general.h"
 #include "flann/algorithms/nn_index.h"
@@ -126,7 +127,9 @@
         /* Construct the randomized trees. */
         for (int i = 0; i < trees_; i++) {
             /* Randomize the order of vectors to allow for unbiased sampling. */
-            std::random_shuffle(vind_.begin(), vind_.end());
+            std::random_device rd;
+            std::mt19937 g(rd());
+            std::shuffle(vind_.begin(), vind_.end(), g);
             tree_roots_[i] = divideTree(&vind_[0], int(size_) );
         }
     }
diff -r 7b28c3f883f9 src/foreign/flann/util/lsh_table.h
--- a/src/foreign/flann/util/lsh_table.h	Fri Oct 11 08:42:26 2024 +0200
+++ b/src/foreign/flann/util/lsh_table.h	Thu Oct 17 16:55:53 2024 -0400
@@ -47,6 +47,7 @@
 #endif
 #include <math.h>
 #include <stddef.h>
+#include <random>
 
 #include "flann/util/dynamic_bitset.h"
 #include "flann/util/matrix.h"
@@ -335,7 +336,9 @@
     // A bit brutal but fast to code
     std::vector<size_t> indices(feature_size * CHAR_BIT);
     for (size_t i = 0; i < feature_size * CHAR_BIT; ++i) indices[i] = i;
-    std::random_shuffle(indices.begin(), indices.end());
+    std::random_device rd;
+    std::mt19937 g(rd());
+    std::shuffle(indices.begin(), indices.end(), g);
 
     // Generate a random set of order of subsignature_size_ bits
     for (unsigned int i = 0; i < key_size_; ++i) {
diff -r 7b28c3f883f9 src/foreign/flann/util/random.h
--- a/src/foreign/flann/util/random.h	Fri Oct 11 08:42:26 2024 +0200
+++ b/src/foreign/flann/util/random.h	Thu Oct 17 16:55:53 2024 -0400
@@ -34,6 +34,7 @@
 #include <algorithm>
 #include <cstdlib>
 #include <vector>
+#include <random>
 
 #include "flann/general.h"
 
@@ -107,7 +108,9 @@
         for (int i = 0; i < size_; ++i) vals_[i] = i;
 
         // shuffle the elements in the array
-        std::random_shuffle(vals_.begin(), vals_.end());
+        std::random_device rd;
+        std::mt19937 g(rd());
+        std::shuffle(vals_.begin(), vals_.end(), g);
 
         counter_ = 0;
     }
